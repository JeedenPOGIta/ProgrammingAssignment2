{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7af0ca64-8585-4ae7-ab1e-bdeb107ce109",
   "metadata": {},
   "source": [
    "# Programming Assignment 2 - Divisible by 3 problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "90ffaf2a-8e84-4f93-8f66-9101f11deb46",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalization is one of the most basic preprocessing techniques in\n",
    "# data analytics. This involves centering and scaling process. Centering means subtracting the data from the\n",
    "# mean and scaling means dividing with its standard deviation. Mathematically, normalization can be\n",
    "# expressed as: z = (X - x bar)/standard deviation\n",
    "\n",
    "# In Python, element-wise mean and element-wise standard deviation can be obtained by using .mean() and\n",
    "# .std() calls.\n",
    "# In this problem, create a random 5 x 5 ndarray and store it to variable X. Normalize X. Save your normalized\n",
    "# ndarray as X_normalized.npy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0fb60fd-f67e-4d1d-9cb9-3df715ce8d18",
   "metadata": {},
   "source": [
    "### [START OF CODE]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cddfdbaf-a286-49b1-b67b-a4e946106a69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The randomly generated array is: \n",
      "\n",
      "[[  9 659 183 284 752]\n",
      " [ 88 525 847 537 917]\n",
      " [648 145 934 676 457]\n",
      " [841 637 902  47   4]\n",
      " [554 222 258 169 783]]\n",
      "\n",
      "The mean of the array is: 483.12\n",
      "\n",
      "The standard deviation of the array is: 308.631\n",
      "\n",
      " The normalized array is:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[-1.53620343,  0.56987146, -0.97242338, -0.64517174,  0.87120218],\n",
       "       [-1.28023433,  0.13569603,  1.17901313,  0.17457741,  1.40582119],\n",
       "       [ 0.5342302 , -1.09554776,  1.46090315,  0.62495342, -0.08463181],\n",
       "       [ 1.15957243,  0.49858893,  1.35721946, -1.41307905, -1.552404  ],\n",
       "       [ 0.22965937, -0.84605889, -0.72941474, -1.01778499,  0.97164575]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import numpy in the code\n",
    "import numpy as np\n",
    "\n",
    "# Random 5x5 array - change to integers using .randint\n",
    "X = np.random.randint(0,999, size = (5,5))\n",
    "\n",
    "#Display the array\n",
    "print(\"The randomly generated array is: \")\n",
    "print(\"\")\n",
    "print(X)\n",
    "\n",
    "#Get the mean of X using .mean()\n",
    "print(\"\")\n",
    "mean = X.mean()\n",
    "print(f\"The mean of the array is: {mean}\")\n",
    "\n",
    "#Centering X - x bar\n",
    "centering = X - mean\n",
    "\n",
    "#Standard deviation\n",
    "sd = round(centering.std(),4)\n",
    "\n",
    "print(\"\")\n",
    "print(f\"The standard deviation of the array is: {sd}\")\n",
    "\n",
    "#Normalization\n",
    "X_normalized = centering/sd\n",
    "\n",
    "print(\"\\n The normalized array is:\")\n",
    "\n",
    "#Save your ndarray and give it a name\n",
    "np.save('X_normalized.npy', X_normalized)\n",
    "\n",
    "#Load your ndarray\n",
    "np.load('X_normalized.npy')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94468294-2eb7-4808-82fe-43a3871c648d",
   "metadata": {},
   "source": [
    "### [END OF CODE]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
